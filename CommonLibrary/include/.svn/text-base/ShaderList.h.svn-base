#pragma once

#include "Uniform.h"
#include "Shader.h"

//****************************************************************************
//
//
//****************************************************************************
class SkeletalAnimationShader : public Shader
{
public:
	SkeletalAnimationShader();

public:
	// location pour les attributes du skinning vertex shader
	int vertexAttribLoc;
	int normalAttribLoc;
	int texCoordAttribLoc;
	int	bonesIndexAttribLoc;
	int	bonesWeightAttribLoc;

	void enable();
	void disable();

	UniformMat4f*     uBonesMat;
};

class SkinningShader : public SkeletalAnimationShader
{
public:
	
	SkinningShader(void);
	~SkinningShader(void);

	virtual void Draw( Mesh* mesh );

	UniformVec3f*     uLightPos;
	UniformMat3f*     uNormalMat;
	UniformSampler2D* uTexture;
};

class ShadowMapShader : public SkeletalAnimationShader
{
public:

	virtual void Draw( Mesh* mesh );

	ShadowMapShader(void);
	~ShadowMapShader(void);
};

//****************************************************************************
//
//
//****************************************************************************
class StaticMeshShader : public Shader
{
public:	
	StaticMeshShader(void);
	~StaticMeshShader(void);

	int vertexAttribLoc;
	int texCoordAttribLoc;

	virtual void enable();
	virtual void disable();
};

class SimpleStaticMeshShader : public  StaticMeshShader
{
public:
	SimpleStaticMeshShader(void);
	~SimpleStaticMeshShader(void);

	virtual void Draw( Mesh* mesh );

	UniformSampler2D*  uTextureSampler;
};

class LightStaticMeshShader : public  StaticMeshShader
{
public:
	LightStaticMeshShader(void);
	~LightStaticMeshShader(void);

	virtual void Draw( Mesh* mesh );

	UniformMat3f *     uNormalMat;
	UniformSampler2D*  uTextureSampler;
	UniformVec3f*	   uLightPos;
	int				   normalAttribLoc;
	UniformVec4f*      uClipPlane;
	UniformMat4f*	   uClipMat;

	void enable();
	void disable();
};


class StaticMeshShadowMapShader : public StaticMeshShader
{
public:
	StaticMeshShadowMapShader(void);
	~StaticMeshShadowMapShader(void);

	virtual void Draw( Mesh* mesh );

	UniformSampler2D* uShadowMapSampler;
	UniformSampler2D* uTextureSampler;
	UniformMat4f*     uLightMat;
};

class ShadowMapGenerator : public StaticMeshShader
{
	public:
	ShadowMapGenerator(void);
	~ShadowMapGenerator(void);

	virtual void Draw( Mesh* mesh );
};


class SkyboxShader : public StaticMeshShader
{
public:
	SkyboxShader(void);
	~SkyboxShader(void);

	virtual void Draw( Mesh* mesh );

	UniformSamplerCube* uCubeMapSampler;
};

//****************************************************************************
//
//
//****************************************************************************
class TextureShader : public Shader
{
public:
	TextureShader(void);
	~TextureShader(void);

	UniformSampler2D*  uTextureSampler;
	virtual void Draw( Mesh* mesh ){}
};

//****************************************************************************
//
//
//****************************************************************************
