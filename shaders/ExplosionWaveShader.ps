
varying vec2 uv;

float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 n) {
	const vec2 d = vec2(0.0, 1.0);
	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
	float total = 0.0, amplitude = 1.0;
	for (int i = 0; i < 4; i++) {
		total += noise(n) * amplitude;
		n += n;
		amplitude *= 0.5;
	}
	return total;
}

void main()
{
  	float dist =  length( uv - vec2(0.5,0.5) );
	
    // draw a line, left side is fixed
    //vec2 t = uv * vec2(2.0,1.0) - 1.0*3.0;
    //float c1 = fbm(t * d);
   	//vec4 col = vec4(c1*0.6,0.2*c1,c1,1.0); // purple color

		float intensity =  abs(dist-0.4);
	  float intens = 1.0 - mix(0.0,0.6,intensity*10.0);
 		vec4 col = vec4(intens,intens,intens,1.0);

    gl_FragColor = col;
}

          
