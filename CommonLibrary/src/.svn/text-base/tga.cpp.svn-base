
#include <stdio.h>
#include <iostream>
using namespace std;

struct HEADER_TGA  
{
   char  idlength;
   char  colourmaptype;
   char  datatypecode;
   short int colourmaporigin;
   short int colourmaplength;
   char  colourmapdepth;
   short int x_origin;
   short int y_origin;
   short width;
   short height;
   char  bitsperpixel;
   char  imagedescriptor;

   HEADER_TGA( char _datatype, short int w, short int h, char _bitsperpixel)
   {
	   idlength = 0; colourmaptype = 0; 
	   datatypecode = _datatype;
	   colourmaporigin = 0;
	   colourmaplength = 0;
	   colourmapdepth = 0;
	   x_origin = 0;
	   y_origin = 0;
	   width = w; height = h;
	   bitsperpixel = _bitsperpixel;
	   imagedescriptor = 0;
   }
};

// http://local.wasp.uwa.edu.au/~pbourke/dataformats/tga/
void saveTGA( char* filename )
{
	int sx = 640;
	int sy = 480;

	FILE* f = fopen(filename, "wb" );
	if( !f )
	{
		cout<<"can't open "<<filename<<" for writing"<<endl;
		return;
	}
	HEADER_TGA h(2,sx,sy,24);
	
	fwrite( &h.idlength, 1, 1, f);
	fwrite( &h.colourmaptype, 1, 1, f);
	fwrite( &h.datatypecode, 1, 1, f);
	fwrite( &h.colourmaporigin, 2, 1, f);
	fwrite( &h.colourmaplength, 2, 1, f);
	fwrite( &h.colourmapdepth, 1, 1, f);
	fwrite( &h.x_origin, 2, 1, f);
	fwrite( &h.y_origin, 2, 1, f);
	fwrite( &h.width, 2, 1, f);
	fwrite( &h.height, 2, 1, f);
	fwrite( &h.bitsperpixel, 1, 1, f);
	fwrite( &h.imagedescriptor, 1, 1, f);

	// les pixels :
	char* data = new char[sx*sy*3];
	for( int i=0; i<sx*sy*3; i+=3 )
	{
		data[i]   = 255; // il faut enregistrer en BGR
		data[i+1] = 255;
		data[i+2] = 255;
	}

	fwrite( data, sizeof(char), sx*sy*3, f);
	
	fclose(f);
	delete[] data;
}

unsigned char* readTGA(const char* filename, int& width, int& height, int& bpp)
{
	FILE* f = fopen(filename, "rb" );
	if( !f )
	{
		cout<<"can't open "<<filename<<" for reading"<<endl;
		return 0;
	}
	HEADER_TGA h(0,0,0,0);
	
	fread( &h.idlength, 1, 1, f);
	fread( &h.colourmaptype, 1, 1, f);
	fread( &h.datatypecode, 1, 1, f);
	fread( &h.colourmaporigin, 2, 1, f);
	fread( &h.colourmaplength, 2, 1, f);
	fread( &h.colourmapdepth, 1, 1, f);
	fread( &h.x_origin, 2, 1, f);
	fread( &h.y_origin, 2, 1, f);
	fread( &h.width, 2, 1, f);
	fread( &h.height, 2, 1, f);
	fread( &h.bitsperpixel, 1, 1, f);
	fread( &h.imagedescriptor, 1, 1, f);

	cout<<"colormap:"<<(int)h.colourmaptype<<endl;
	cout<<"datatype: "<<(int)h.datatypecode<<endl;
	cout<<"size: "<<h.width<<"*"<<h.height<<endl;
	cout<<"bpp: "<<(int)h.bitsperpixel<<endl;

	width = h.width;
	height = h.height;
	bpp = h.bitsperpixel;

	// les pixels :
	unsigned char* data = new unsigned char[width*height*4];
	
	if( (int)h.datatypecode == 10 ) // Run Length Encoded, RGB images
	{
		int lus = 0;
		while( lus < h.width*h.height )
		{
			unsigned char header;
			fread( &header, 1, 1,f);
			if( header & 0x80 )
			{
				// run length packet :
				int num = ( header & 0x7F ) +1;
				
				if( bpp == 24 )
				{
					unsigned char col[3];
					fread(col,1,3,f);
					for(int i=0; i< num; i++ )
					{
						data[lus*4+i*4]   = col[2]; // bgr
						data[lus*4+i*4+1] = col[1];
						data[lus*4+i*4+2] = col[0];
						data[lus*4+i*4+3] = 255;
					}
				}
				else if( bpp == 32 )
				{
					unsigned char col[4];
					fread(col,1,4,f);
					for(int i=0; i< num; i++ )
					{
						data[lus*4+i*4]   = col[2]; // bgra
						data[lus*4+i*4+1] = col[1];
						data[lus*4+i*4+2] = col[0];
						data[lus*4+i*4+3] = col[3];
					}
				}
				lus += num;
			}
			else
			{
				// run length packet :
				int num = ( header & 0x7F ) +1;
				//cout<<num<<endl; // les nums prochains pixels sont de couleur :
		
				if( bpp == 24)
				{
					for( int i=0; i< num; i++ )
					{
						unsigned char col[3];
						fread(col,1,3,f);
				
						data[lus*4+i*4] = col[2]; // bgr
						data[lus*4+i*4+1] = col[1];
						data[lus*4+i*4+2] = col[0];
						data[lus*4+i*4+3] = 255;
					}
				}
				else if(bpp ==32)
				{
					for( int i=0; i< num; i++ )
					{
						unsigned char col[4];
						fread(col,1,4,f);
				
						data[lus*4+i*4] = col[2]; // bgr
						data[lus*4+i*4+1] = col[1];
						data[lus*4+i*4+2] = col[0];
						data[lus*4+i*4+3] = col[3];
					}
				}
				lus += num;
			}
		}
		cout<<lus<<" pixels lus"<<endl;
	}
	else if( (int)h.datatypecode == 2 ) // Unmapped RGB
	{
		if( (int)h.bitsperpixel == 24 ) // 3 bytes par pixel
		{
			fread( data, 1, 3*h.width*h.height, f );

			// il faut inverser R et B :
			for( int i=0; i< h.width * h.height; i++ )
			{
				unsigned char temp = data[3*i];
				data[3*i] = data[3*i+2];
				data[3*i+2] = temp;
			}
		}
	}
	


	fclose(f);
	return data;
}
