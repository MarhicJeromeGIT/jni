
uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform sampler2D shadowmap;

#ifdef SPECULAR_MAP
uniform sampler2D specularMap;
#endif

#ifdef DIFFUSE_MULT
uniform vec4 diffuseMult; // multiplied by the colorMap
#endif

#ifdef DIFFUSE_MIX
uniform vec4 diffuseMult;
uniform vec4 diffuseMult2;  // mixed by the colorMap
#endif 

const float invRadius = 0.001;
uniform bool outline;


varying vec3 lightVec;
varying vec3 eyeVec;
varying vec2 texCoord;

varying vec3 n;
varying vec4 eyepos;
varying vec4 PosFromLightPOV;

void main (void)
{
	float distSqr = dot(lightVec, lightVec);
	float att = clamp(1.0 - invRadius * sqrt(distSqr), 0.0, 1.0);
	vec3 lVec = lightVec * inversesqrt(distSqr);
	vec3 bump = normalize( texture2D(normalMap, texCoord).xyz * 2.0 - 1.0);

	vec3 vVec = normalize(eyeVec);
	
	vec4 texColor = texture2D(colorMap, texCoord);

#ifdef DIFFUSE_MIX
	float mixValue = length(texColor.xyz);
	texColor = mix( diffuseMult, diffuseMult2, mixValue );
#elif defined( DIFFUSE_MULT )
  texColor *= diffuseMult;
#endif


	vec3 light_ambient = vec3(0.3,0.3,0.3);
	vec3 light_diffuse = vec3(1.0,1.0,1.0);
	float lambert = max( dot(lVec, bump), 0.0 );
	vec4 lightColor = vec4(light_ambient + light_diffuse*lambert, 1.0) * texColor;         

	

  vec3 ProjCoords = PosFromLightPOV.xyz / PosFromLightPOV.w;                                  
  float z =  ProjCoords.z;                                                     
  float depth = texture2D(shadowmap, PosFromLightPOV.xy ).z;
	float shadow = 0.0;     
	
  vec4 vSpecular= vec4(0.0);                       
	if (depth < (z - 0.0005) && lightVec.x > 100.0 )
	{                                                                 
    shadow = 0.8;                                                                  
  }
	else                                                                                    
  {
	  shadow = 1.0;                                                                         
	
		if( lambert > 0.0 )
		{
			float specular = pow(clamp(dot(reflect(-lVec, bump), vVec), 0.0, 1.0), 32.0 );
#ifdef SPECULAR_MAP
			vSpecular = texture2D(specularMap, texCoord) * specular;	
#else
			vSpecular = vec4(1.0,0.0,0.0,1.0) * specular;	
#endif			
		}
	}

	float side = 0.0;
	if( outline )
	{
		side = smoothstep( 0.5, 1.0, 1.0 - abs( dot( normalize(n), normalize(eyepos.xyz) ) ) );
	}

	gl_FragColor = vec4(side,0.0,0.0,1.0) + vec4( vec3(lightColor) * att * shadow, 1.0) + vSpecular;
	
}
