#version 400

layout(vertices = 3) out;
in vec3 vPosition[];
out vec3 tcPosition[];
uniform float TessLevelInner;
uniform float TessLevelOuter;

uniform mat4 ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectionMatrix;

#define ID gl_InvocationID

void main()
{
    tcPosition[ID] = vPosition[ID];
    if (ID == 0) 
	{
		
		
		
		vec3 v0  = vec3(vPosition[0].x, 0, vPosition[0].z);
		vec3 v1  = vec3(vPosition[1].x, 0, vPosition[1].z);
		vec3 v2  = vec3(vPosition[2].x, 0, vPosition[2].z);
		
		float L =  length( vec3(ViewMatrix * ModelMatrix * vec4( (v0+v1+v2)*0.333f, 1.0 )) );
		float L0 = length( vec3(ViewMatrix * ModelMatrix * vec4( (v0+v1)*0.5f, 1.0 )) );
		float L1 = length( vec3(ViewMatrix * ModelMatrix * vec4( (v1+v2)*0.5f, 1.0 )) );
		float L2 = length( vec3(ViewMatrix * ModelMatrix * vec4( (v0+v2)*0.5f, 1.0 )) );

		float  i  = 1 + max(0, 8 - L  *0.2f);
		float o0 = 1 + max(0, 8 - L0 *0.2f);
		float o1 = 1 + max(0, 8 - L1 *0.2f);
		float o2 = 1 + max(0, 8 - L2 *0.2f);
			
		gl_TessLevelInner[0] = i;

		gl_TessLevelOuter[0] = o1;
		gl_TessLevelOuter[1] = o2;
		gl_TessLevelOuter[2] = o0;
    }
}