#define NBTEXTURES 2

uniform sampler2DArray texArray;
uniform sampler2D tex;
uniform sampler2D tex2;
varying vec3 textureWeight;

uniform sampler2D shadowmap;
uniform vec4 clipPlane;

varying vec2 texCoord[NBTEXTURES];
varying vec4 PosFromLightPOV;

varying vec3 interpolatedVertexEye;

uniform vec4 lightDiffuseColor;
uniform vec4 ambientColor;
varying float diffuseAmount;

void main()
{
	float clipPos = dot (interpolatedVertexEye, clipPlane.xyz) + clipPlane.w;
	if (clipPos < 0.0) {
		  discard;
	}	

  //vec4 color  = texture2DArray(tex, vec3( texCoord[0],0) );
	vec4 color  = texture2D(tex, texCoord[0] );
	vec4 color2 = texture2D(tex2, texCoord[1] + vec2(0,0.000f)) * textureWeight.x +
								texture2D(tex2, texCoord[1] + vec2(0,0.333f)) * textureWeight.y +
								texture2D(tex2, texCoord[1] + vec2(0,0.666f)) * textureWeight.z;
  			

  vec3 ProjCoords = PosFromLightPOV.xyz / PosFromLightPOV.w;                                  
  float z =  ProjCoords.z;                                                     
  float depth = texture2D(shadowmap, PosFromLightPOV.xy ).z;
	float shadow = 0.0;                                          
    
	if (depth < (z - 0.0011) )
	{                                                                 
    shadow = 0.6;                                                                         
  }
	else                                                                                    
  {
	  shadow = 1.0;                                                                         
	}

	const float ambientAmount = 0.3;
	vec4 lightColor = vec4( ambientColor.xyz * ambientAmount + vec3(1.0,1.0,1.0)*diffuseAmount , 1.0);
	gl_FragColor = lightColor * vec4( vec3( 1.5 * color2 * color * shadow), color.a); // + vec4(color2.xyz,1.0);
}
          
