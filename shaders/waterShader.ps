#version 150

uniform sampler2D waterTex;
uniform sampler2D shadowmap;

uniform sampler2D mirorTex;
uniform mat4 projReflectionMat;

varying vec2 oTexCoord;
varying vec4 interpolatedVertexObject;
varying vec4 PosFromLightPOV;

in vec3 lightDir, eyeVec;

void main()
{
  vec3 ProjCoords = PosFromLightPOV.xyz / PosFromLightPOV.w;                                  
  float z =  ProjCoords.z;                                                     
  float depth = texture(shadowmap, PosFromLightPOV.xy ).z;
	float shadow = 1.0;                                           
	if (depth < (z - 0.00500) )
	{                                                                 
    shadow = 0.999;                                                                         
  }

	// natural color :
	vec3 bump = normalize( texture2D(waterTex, oTexCoord).xyz * 2.0 - 1.0);
	
	// light refraction :
	vec4 light_color = vec4(0.5,0.5,0.7,0.8); // ambient
							
	vec3 N = bump;
	vec3 L = normalize(lightDir);
	float lambertTerm = max(0.0, dot(N,L) );
	
	if(lambertTerm > 0.0)
	{
		light_color += lambertTerm * vec4(1.0,1.0,1.0,0.0);	
		
		vec3 E = normalize(eyeVec);
		vec3 R = reflect(-L, N);

		float specular = pow(clamp(dot(R, E), 0.0, 1.0), 2.0 );
		
		light_color += specular * vec4(1.0,1.0,0.0,0.0);	
	}


	
	// Water reflection :
//	vec4 vClipReflection = projReflectionMat * vec4(N*5.0 + interpolatedVertexObject.xyz,1.0);
//	vec4 reflectionTextureColor = texture2D(mirorTex, vClipReflection.xy/vClipReflection.z);
	vec4 vClipReflection = projReflectionMat * vec4(N*5.0 + interpolatedVertexObject.xyz,1.0);
	vec4 reflectionTextureColor = texture2DProj (mirorTex, vClipReflection.xyz);


  //reflectionTextureColor = reflectionTextureColor*0.00001 + vec4(0.5,0.5,0.5,1.0);

	gl_FragColor = shadow * reflectionTextureColor * light_color;
	gl_FragColor.a = 0.9;
}
