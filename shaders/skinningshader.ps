#version 120

uniform sampler2D tex;
uniform vec4 clipPlane;

varying vec3 Normal, LightDir, EyeVec;
varying vec2 texCoord;
varying vec3 interpolatedVertexEye;
varying vec4 vertex_pos;


#ifdef USE_CUBEMAP
	uniform samplerCube gCubemapTexture;
	uniform mat4 invviewmat;
	varying vec3 pos_eye;
	varying vec3 n_eye;
#endif

void main()
{
	float clipPos = dot (interpolatedVertexEye, clipPlane.xyz) + clipPlane.w;
	if (clipPos < 0.0) {
		  discard;
	}	

	// Ambient light :
	vec3 light_color = vec3(0.4,0.4,0.4);

	// Diffuse light
	vec3 L = normalize(LightDir);
  vec3 N = normalize(Normal);
	float diffuse = max(0.0, dot(N,L) );
	float specular = 0.0;

	light_color += vec3(diffuse,diffuse,diffuse);

	float side = max( 0.0, dot( N, vec3(0,0,1) ) );
	float outlineColor = side < 0.1 ? 0.0 : 1.0;

	vec3 specular_color = vec3(0,0,0);

#ifdef USE_CUBEMAP
	vec3 incident_eye = normalize (pos_eye);
	vec3 normal = normalize (n_eye);

	vec3 reflected = reflect (incident_eye, normal);
	// convert from eye to world space
	reflected = vec3 (invviewmat * vec4 (reflected, 0.0));

	vec4 reflectColor = textureCube(gCubemapTexture, reflected );

	light_color = light_color*0.00001 + reflectColor.rgb;
#else

	// specular
	if(diffuse > 0.0)
	{
		vec3 vVec = normalize(EyeVec);
		float specular = pow(clamp(dot(reflect(-L, N), vVec), 0.0, 1.0), 4.0 );
		specular_color = vec3(1.0,1.0,1.0)  * specular;
	}

#endif

	vec4 texture_color = texture2D( tex, texCoord );
	//gl_FragColor = vec4( outlineColor * texture_color.rgb * light_color + specular_color, texture_color.a);
	gl_FragData[0] = vec4( outlineColor * texture_color.rgb * light_color + specular_color, texture_color.a);

}


