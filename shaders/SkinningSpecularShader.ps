#version 120

uniform sampler2D colorMap;
uniform sampler2D normalMap;

#ifdef SPECULAR_MAP
uniform sampler2D specularMap;
#endif

#ifdef DIFFUSE_MIX
uniform vec4 color1;
uniform vec4 color2;
#endif
uniform vec4 clipPlane;

varying vec3 Normal, LightDir, EyeVec;
varying vec2 texCoord;
varying vec3 interpolatedVertexEye;
varying vec4 vertex_pos;

varying vec3 lightVec; 

#ifdef CRAYON_STYLE
uniform sampler2D crayonMap;
varying vec2 windowUV;
#endif

void main()
{
	float clipPos = dot (interpolatedVertexEye, clipPlane.xyz) + clipPlane.w;
	if (clipPos < 0.0) {
		  discard;
	}	
  
  vec3 bump = normalize( texture2D(normalMap, texCoord).xyz * 2.0 - 1.0);
	vec3 lVec = normalize(lightVec);
	float lambert = max( dot(lVec, bump), 0.0 );

	// Ambient light :
	vec3 ambient_light = vec3(0.3,0.3,0.3);
	vec3 diffuse_light = vec3(1.0,1.0,1.0);
	
#ifdef DIFFUSE_MIX
	float mixValue = texture2D( colorMap, texCoord ).r; // it's a grey texture
	vec4 baseColor = mix( color1, color2, mixValue );
#else
	vec4 baseColor = texture2D( colorMap, texCoord );
#endif

#ifdef CRAYON_STYLE
	vec4 crayonColor = texture2D( crayonMap, windowUV );
	baseColor += 0.5*crayonColor;
/*
	if(lambert > 1.0)
		lambert = 1.0;
	else if( lambert > 0.6 )
		lambert = 0.8;
	else if( lambert > 0.4 )
		lambert = 0.4;
	else
		lambert = 0.0;
*/
#endif

	// Diffuse and specular
	vec3 specular_color = vec3(0,0,0);
	if(lambert > 0.0)
	{
		vec3 vVec = normalize(EyeVec);
		float specular = pow(clamp(dot(reflect(-lVec, bump), vVec), 0.0, 1.0), 32.0 );

#ifdef SPECULAR_MAP
		specular_color = texture2D(specularMap, texCoord).rgb * specular ;	
#else
		specular_color = vec3(1.0,1.0,1.0)  * specular;
#endif
	}


	float side = max( 0.0, dot( normalize(Normal), vec3(0,0,1) ) );
	float outlineColor = side < 0.1 ? 0.0 : 1.0;

	vec3 light_color = lambert*diffuse_light + ambient_light;
	gl_FragColor = vec4( mix(vec3(0.3,0.3,0.3), light_color * baseColor.rgb + specular_color,outlineColor), baseColor.a );
}


