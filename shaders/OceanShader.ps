// Light:
uniform vec4 lightDiffuseColor;
uniform vec4 ambient;
uniform sampler2D tex;
uniform samplerCube cubemap;
uniform mat4 invviewmat;

// Material:
uniform vec4 diffuse_color;

varying vec3 lightDir, eyeVec, normal;
varying vec2 texCoord;
varying vec3 pos_eye;
varying vec3 n_eye;

void main()
{
    vec4 color  = texture2D(tex, texCoord );

	vec3 L = normalize(lightDir);
    vec3 N = normalize(normal);
	float diffuse = max(0.0, dot(N,L) );
	float specular = 0.0;


	if(diffuse > 0.0)
	{
		vec3 E = normalize(eyeVec);
		vec3 R = reflect(-L, N);
		specular = pow(clamp(dot(R, E), 0.0, 1.0), 16.0 );
	}

	// Cubemap reflection :
	vec3 incident_eye = normalize (pos_eye);
	vec3 normal       = normalize (n_eye);

	vec3 reflected = reflect (incident_eye, normal);
	// convert from eye to world space
	reflected = vec3 (invviewmat * vec4 (reflected, 0.0));
	vec4 reflectColor = textureCube(cubemap, reflected );

	
    vec4 light = ambient + diffuse * diffuse_color * lightDiffuseColor + specular * vec4(1.0,1.0,1.0,1.0);
    gl_FragColor = vec4( light.xyz * (reflectColor.xyz + color.xyz ), color.a );
	
}
